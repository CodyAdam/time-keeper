import styles from '../styles/Default.module.css';
import { useRouter } from 'next/router';
import { Counter } from '../modules/Counter';
import Head from 'next/head';
import { db } from './api/firebase';
import {
  addDoc,
  collection,
  doc,
  DocumentData,
  DocumentReference,
  onSnapshot,
  runTransaction,
  Timestamp,
  updateDoc,
} from 'firebase/firestore';
import { Admin } from '../modules/Admin';
import { Event, Calendar } from '../modules/Calendar';
import { Button, ButtonGroup } from 'react-bootstrap';
import { useEffect, useState } from 'react';
import moment from 'moment';
import { EventHistory } from '../modules/EventHistory';

export type UserData = {
  name: string;
  credits: number;
  freeCredits: number;
  dailyFreeCredits: number,
  creditsPerHour: number,
  startTimestamp: Timestamp | null;
  pass: string;
};

export default function User() {
  const [events, setEvents] = useState<Event[]>([]);
  const [data, setData] = useState<UserData>({
    name: '',
    credits: 0,
    freeCredits: 400,
    dailyFreeCredits: 400,
    creditsPerHour: 200,
    startTimestamp: null,
    pass: '',
  });
  const [ongoingEvent, setOngoingEvent] = useState<Event | null>(null);
  const router = useRouter();
  const pid = router.query.pid as string;

  function updateOngoing() {
    if (data.startTimestamp) {
      const start = data.startTimestamp.toDate();
      const end = moment().toDate();
      setOngoingEvent({
        title: getEventName(start, end),
        start: start,
        end: end,
        hexColor: 'ff3333',
        multiplier: 1,
        cost: 0,
      });
    }else {
      setOngoingEvent(null);
    }
  }
  useEffect(updateOngoing, [data.startTimestamp]);

  useEffect(() => {
    if (!pid) return;
    const userRef = doc(db, 'users', pid);
    const unsubData = onSnapshot(userRef, (docSnap) => {
      if (docSnap.exists()) {
        const newData: UserData = docSnap.data() as UserData;
        setData({...data, ...newData});
      } else console.error('Doc not found :', userRef);
    });
    const unsubEvents = onSnapshot(collection(db, 'users', pid, 'events'), (querySnap) => {
      const tempEvents: Event[] = [];
      querySnap.forEach((docSnap) => {
        tempEvents.push({
          ...(docSnap.data() as Event),
          start: docSnap.data().start.toDate(),
          end: docSnap.data().end.toDate(),
        });
      });
      tempEvents.sort((a, b) => b.start.getTime() - a.start.getTime());
      setEvents(tempEvents);
    });
    updateOngoing();
    return () => {
      unsubData();
      unsubEvents();
    };
  }, [pid]);

  if (!pid) return <main className={styles.center}>Loading</main>;
  const userRef = doc(db, 'users', pid);
  return (
    <div className={styles.hContainer}>
      <Head>
        <title>Page {pid}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <EventHistory events={events} />
      <div className={styles.vContainer}>
        <Admin userRef={userRef} data={data} />
        <Counter credits={data.credits} freeCredits={data.freeCredits}/>
        <ButtonGroup>
          <Button
            variant="outline-primary"
            onClick={() => {
              onToggle(userRef, data.startTimestamp);
            }}
          >
            {data.startTimestamp ? 'End' : 'Start'}
          </Button>
          <Button 
            onClick={() => {updateOngoing();}}
            >
            Refresh
          </Button>
        </ButtonGroup>
        <Calendar events={ongoingEvent ? events.concat([ongoingEvent]) : events} />
      </div>
      <div className={styles.center}>NOTHING YET</div>
    </div>
  );
}


function onToggle(userRef: DocumentReference<DocumentData>, startTimestamp: Timestamp | null = null){
  if (startTimestamp) {
    onEnd(userRef, startTimestamp);
  } else {
    onStart(userRef);
  }
}

function onStart(userRef: DocumentReference<DocumentData>) {
  updateDoc(userRef, {
    startTimestamp: Timestamp.fromDate(moment().toDate()),
  }).catch((error) => {
    console.error('Error updating doc :', error);
  });
}

function onEnd(userRef: DocumentReference<DocumentData>, startTimestamp: Timestamp | null = null) {
  let start: null | Date = null;
  if (startTimestamp) start = startTimestamp.toDate();
  else return console.error("Can't find start time");
  updateDoc(userRef, {
    startTimestamp: null,
  })
    .then(() => {
      if (start == null) throw "Can't find start time";
      const end = moment().toDate();
      AppendEvent(userRef, {
        start: start,
        end: end,
        title: getEventName(start, end),
        multiplier: 1,
        cost: 0,
      });
    })
    .catch((error) => {
      console.error('Error updating doc :', error);
    });
}

function AppendEvent(userRef: DocumentReference<DocumentData>, event: Event) {
  const eventsRef = collection(db, 'users', userRef.id, 'events');
  addDoc(eventsRef, event).catch((error) => {
    console.error('Error adding event :', error);
  });
}

function getEventName(start: Date, end: Date, credits: number = 0) {
  const duration = moment.duration(moment(end).diff(moment(start)));
  const credSpent = ' (' + credits.toString() + ' credits)';
  const unit = duration.asHours() > 1 ? 'h' : 'min';
  return duration.asMinutes().toPrecision(3).toString() + ' ' + unit + ' ' + credSpent;
}


export function updateData(newData: Partial<UserData>, userRef: DocumentReference<DocumentData>, pass: string) {
  return updateDoc(userRef, {...newData, pass: pass})
}
